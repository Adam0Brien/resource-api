// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             (unknown)
// source: relationships/v1/subject_ispropagatedto_object_service.proto

package relationships

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationObjectSubjectRelationshipServiceCreateObjectSubjectRelationship = "/relationships.v1.ObjectSubjectRelationshipService/CreateObjectSubjectRelationship"
const OperationObjectSubjectRelationshipServiceDeleteObjectSubjectRelationship = "/relationships.v1.ObjectSubjectRelationshipService/DeleteObjectSubjectRelationship"
const OperationObjectSubjectRelationshipServiceUpdateObjectSubjectRelationship = "/relationships.v1.ObjectSubjectRelationshipService/UpdateObjectSubjectRelationship"

type ObjectSubjectRelationshipServiceHTTPServer interface {
	CreateObjectSubjectRelationship(context.Context, *CreateObjectSubjectRelationshipRequest) (*CreateObjectSubjectRelationshipResponse, error)
	DeleteObjectSubjectRelationship(context.Context, *DeleteObjectSubjectRelationshipRequest) (*DeleteObjectSubjectRelationshipResponse, error)
	UpdateObjectSubjectRelationship(context.Context, *UpdateObjectSubjectRelationshipRequest) (*UpdateObjectSubjectRelationshipResponse, error)
}

func RegisterObjectSubjectRelationshipServiceHTTPServer(s *http.Server, srv ObjectSubjectRelationshipServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/inventory/v1beta1/resource-relationships/object-to-subject", _ObjectSubjectRelationshipService_CreateObjectSubjectRelationship0_HTTP_Handler(srv))
	r.PUT("/api/inventory/v1beta1/resource-relationships/object-to-subject", _ObjectSubjectRelationshipService_UpdateObjectSubjectRelationship0_HTTP_Handler(srv))
	r.DELETE("/api/inventory/v1beta1/resource-relationships/object-to-subject", _ObjectSubjectRelationshipService_DeleteObjectSubjectRelationship0_HTTP_Handler(srv))
}

func _ObjectSubjectRelationshipService_CreateObjectSubjectRelationship0_HTTP_Handler(srv ObjectSubjectRelationshipServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateObjectSubjectRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationObjectSubjectRelationshipServiceCreateObjectSubjectRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateObjectSubjectRelationship(ctx, req.(*CreateObjectSubjectRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateObjectSubjectRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

func _ObjectSubjectRelationshipService_UpdateObjectSubjectRelationship0_HTTP_Handler(srv ObjectSubjectRelationshipServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateObjectSubjectRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationObjectSubjectRelationshipServiceUpdateObjectSubjectRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateObjectSubjectRelationship(ctx, req.(*UpdateObjectSubjectRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateObjectSubjectRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

func _ObjectSubjectRelationshipService_DeleteObjectSubjectRelationship0_HTTP_Handler(srv ObjectSubjectRelationshipServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteObjectSubjectRelationshipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationObjectSubjectRelationshipServiceDeleteObjectSubjectRelationship)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteObjectSubjectRelationship(ctx, req.(*DeleteObjectSubjectRelationshipRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteObjectSubjectRelationshipResponse)
		return ctx.Result(200, reply)
	}
}

type ObjectSubjectRelationshipServiceHTTPClient interface {
	CreateObjectSubjectRelationship(ctx context.Context, req *CreateObjectSubjectRelationshipRequest, opts ...http.CallOption) (rsp *CreateObjectSubjectRelationshipResponse, err error)
	DeleteObjectSubjectRelationship(ctx context.Context, req *DeleteObjectSubjectRelationshipRequest, opts ...http.CallOption) (rsp *DeleteObjectSubjectRelationshipResponse, err error)
	UpdateObjectSubjectRelationship(ctx context.Context, req *UpdateObjectSubjectRelationshipRequest, opts ...http.CallOption) (rsp *UpdateObjectSubjectRelationshipResponse, err error)
}

type ObjectSubjectRelationshipServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewObjectSubjectRelationshipServiceHTTPClient(client *http.Client) ObjectSubjectRelationshipServiceHTTPClient {
	return &ObjectSubjectRelationshipServiceHTTPClientImpl{client}
}

func (c *ObjectSubjectRelationshipServiceHTTPClientImpl) CreateObjectSubjectRelationship(ctx context.Context, in *CreateObjectSubjectRelationshipRequest, opts ...http.CallOption) (*CreateObjectSubjectRelationshipResponse, error) {
	var out CreateObjectSubjectRelationshipResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/object-to-subject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationObjectSubjectRelationshipServiceCreateObjectSubjectRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ObjectSubjectRelationshipServiceHTTPClientImpl) DeleteObjectSubjectRelationship(ctx context.Context, in *DeleteObjectSubjectRelationshipRequest, opts ...http.CallOption) (*DeleteObjectSubjectRelationshipResponse, error) {
	var out DeleteObjectSubjectRelationshipResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/object-to-subject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationObjectSubjectRelationshipServiceDeleteObjectSubjectRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ObjectSubjectRelationshipServiceHTTPClientImpl) UpdateObjectSubjectRelationship(ctx context.Context, in *UpdateObjectSubjectRelationshipRequest, opts ...http.CallOption) (*UpdateObjectSubjectRelationshipResponse, error) {
	var out UpdateObjectSubjectRelationshipResponse
	pattern := "/api/inventory/v1beta1/resource-relationships/object-to-subject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationObjectSubjectRelationshipServiceUpdateObjectSubjectRelationship))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
